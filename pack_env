#!/usr/bin/env python
import logging
import os.path
import shlex
import subprocess
from itertools import chain
from typing import Set

from conda._vendor.boltons.setutils import IndexedSet
from conda.base.context import context
from conda.core.link import UnlinkLinkTransaction
from conda.core.package_cache_data import PackageCacheData, ProgressiveFetchExtract
from conda.core.solve import Solver
from conda.models.channel import Channel, prioritize_channels
from conda.models.records import PackageCacheRecord, PackageRecord
from conda_env.specs.yaml_file import YamlFileSpec

output_pkgs = "app/pkgs"


def main():
    logging.basicConfig(level=logging.INFO)

    spec = YamlFileSpec(filename="test_env.yml")
    env = spec.environment

    logging.info(env)
    logging.info(env.dependencies)

    assert set(env.dependencies) == {"conda"}

    channel_urls = [chan for chan in env.channels if chan != "nodefaults"]
    if "nodefaults" not in env.channels:
        channel_urls.extend(context.channels)
    _channel_priority_map = prioritize_channels(channel_urls)

    prefix = "/dev/null"

    channels = IndexedSet(Channel(url) for url in _channel_priority_map)
    subdirs = IndexedSet(os.path.basename(url) for url in _channel_priority_map)

    solver = Solver(prefix, channels, subdirs, specs_to_add=env.dependencies["conda"])
    transaction: UnlinkLinkTransaction = solver.solve_for_transaction()

    logging.info(transaction)

    transaction.download_and_extract()
    fetcher: ProgressiveFetchExtract = transaction._pfe

    target_records: Set[PackageRecord] = set(fetcher.link_precs)
    logging.info("target_records=%s", target_records)

    extracted: Set[PackageCacheRecord] = {
        next(
            (
                pcrec
                for pcrec in chain(
                    *(
                        PackageCacheData(pkgs_dir).query(precord)
                        for pkgs_dir in context.pkgs_dirs
                    )
                )
                if pcrec.is_extracted
            ),
            None,
        )
        for precord in target_records
    }

    logging.info("extracted=%s", extracted)

    for e in extracted:
        extracted_dir = e.extracted_package_dir
        basename = os.path.basename(e.extracted_package_dir)
        outname = os.path.join(output_pkgs, basename + ".tar.zst")

        if os.path.exists(outname):
            logging.info("Found package %s", outname)
            continue

        os.makedirs(output_pkgs, exist_ok=True)

        pkg_cmd = "tar -c -C {} {} | zstd -15 -T0 -f - -o {}".format(
            shlex.quote(extracted_dir),
            " ".join(shlex.quote(f) for f in os.listdir(extracted_dir)),
            outname,
        )
        logging.info("packaging: %s", pkg_cmd)
        subprocess.check_call(pkg_cmd, shell=True)

    return extracted


if __name__ == "__main__":
    main()
